@attribute [Authorize]
@page "/task-details/{TaskId:int}"

@using Services
@using ViewModels.ReleasesModels
@using ViewModels.TasksModels

@inject NavigationManager NavigationManager
@inject ReleasesService ReleasesService
@inject TasksService TasksService

@if (task == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-6">
            <div class="card">
                <div class="card-header">
                    <div class="float-left">@task.Type</div>
                    @if (task.Release != null)
                    {
                        <div class="float-right">
                            <a href="/release-details/@task.Release.ReleaseId">@task.Release.Title</a>
                        </div>
                    }
                </div>
                <div class="card-body">
                    <h5 class="card-title">@task.Title</h5>
                    <p>Story points: @task.StoryPoint</p>
                    <p><progress value="@task.Progress" max="100" /> @task.Progress %</p>
                    <p class="card-text">@task.Description</p>
                </div>
                <AuthorizeView Roles="TaskEditors">
                    <div class="card-footer">
                        <a class="btn btn-link" href="/edit-task/@TaskId">Edit</a>
                    </div>
                </AuthorizeView>
            </div>
        </div>
        <div class="col-6">
            @if (task.Release == null)
            {
                <div class="card">
                    <div class="card-header">Add to release</div>
                    <div class="card-body">
                        <form>
                            <div class="form-group">
                                <label for="releaseId">Release id:</label>
                                <input id="releaseId" type="number" class="form-control" @bind="releaseId" />
                            </div>
                        </form>
                    </div>
                    <div class="card-footer">
                        <button class="btn btn-primary" type="submit" @onclick="async() => await AddToReleaseAsync()">Add</button>
                    </div>
                </div>
                <br />
            }
            <div class="card">
                <div class="card-header">Dependant tasks</div>
                <div class="card-body">
                    <form>
                        <div class="form-group">
                            <label for="dependentTaskId">Dependent task id:</label>
                            <input id="dependentTaskId" type="number" class="form-control" @bind="dependentTaskId" />
                        </div>

                        <div class="form-group">
                            <button type="submit" class="btn btn-primary" @onclick="async() => await AddDependentTaskAsync()">Add</button>
                        </div>
                    </form>

                    <div class="list-group">
                        @foreach (var dependentTask in task.DependentTasks)
                        {
                            <a class="list-group-item list-group-item-action" href="task-details/@dependentTask.TaskId">#@dependentTask.TaskId @dependentTask.Title</a>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int TaskId { get; set; }

    private TaskDetailsModel task { get; set; }
    private int dependentTaskId { get; set; }

    private int releaseId { get; set; }

    protected async override Task OnParametersSetAsync()
    {
        task = await TasksService.GetTaskAsync(TaskId);
    }

    private async Task AddDependentTaskAsync()
    {
        await TasksService.AddDependentTaskAsync(TaskId, Convert.ToInt32(dependentTaskId));

        await OnParametersSetAsync();
    }

    private async Task AddToReleaseAsync()
    {
        var addTaskModel = new AddTaskModel(releaseId);
        addTaskModel.TaskId = TaskId;

        await ReleasesService.AddTaskAsync(addTaskModel);

        NavigationManager.NavigateTo(NavigationManager.Uri, true);
    }
}